{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {
    "vscode": {
     "languageId": "raw"
    }
   },
   "source": [
    "---\n",
    "execute:\n",
    "  echo: true\n",
    "format:\n",
    "  html: default\n",
    "  revealjs:\n",
    "    chalkboard: true\n",
    "    code-fold: true\n",
    "    code-line-numbers: true\n",
    "    echo: true\n",
    "    output-file: revealjs_llvm.qmd\n",
    "    scrollable: true\n",
    "    slideNumber: c/t\n",
    "sidebar: false\n",
    "title: llvmn\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# intro to llvm\n",
    "\n",
    "difference between bril and llvm \n",
    "\n",
    "\n",
    "handy links \n",
    "\n",
    "[llvm programmers guide]( https://llvm.org/docs/ProgrammersManual.html)\n",
    "\n",
    "[Adrians tutorial](https://www.cs.cornell.edu/~asampson/blog/llvm.html)\n",
    "\n",
    "\n",
    "[llvm doc]( https://llvm.org/docs/LangRef.html)\n",
    "\n",
    "google or github pilot is very useful for this "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#as a first step I'm going to show how to install clang and cmake \n",
    "\n",
    "# step remove any old copies \n",
    "# the -S flag to sudo means - read from stdinput\n",
    "# the -y flag means always ans yes to apt \n",
    "# since sudo needs a password \n",
    "# -qq is the very quiet option \n",
    "!sudo -S apt purge -y -qq clang cmake \n",
    "!sudo -S apt install -y -qq clang cmake \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "lets take a look  at llvm ir "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting temp.c\n"
     ]
    }
   ],
   "source": [
    "%%writefile temp.c\n",
    "int main(int argc, char** argv){\n",
    "    return argc;\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "; ModuleID = 'temp.c'\n",
      "source_filename = \"temp.c\"\n",
      "target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n",
      "target triple = \"x86_64-pc-linux-gnu\"\n",
      "\n",
      "; Function Attrs: noinline nounwind optnone uwtable\n",
      "define dso_local i32 @main(i32 noundef %0, i8** noundef %1) #0 {\n",
      "  %3 = alloca i32, align 4\n",
      "  %4 = alloca i32, align 4\n",
      "  %5 = alloca i8**, align 8\n",
      "  store i32 0, i32* %3, align 4\n",
      "  store i32 %0, i32* %4, align 4\n",
      "  store i8** %1, i8*** %5, align 8\n",
      "  %6 = load i32, i32* %4, align 4\n",
      "  ret i32 %6\n",
      "}\n",
      "\n",
      "attributes #0 = { noinline nounwind optnone uwtable \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" \"target-cpu\"=\"x86-64\" \"target-features\"=\"+cx8,+fxsr,+mmx,+sse,+sse2,+x87\" \"tune-cpu\"=\"generic\" }\n",
      "\n",
      "!llvm.module.flags = !{!0, !1, !2, !3, !4}\n",
      "!llvm.ident = !{!5}\n",
      "\n",
      "!0 = !{i32 1, !\"wchar_size\", i32 4}\n",
      "!1 = !{i32 7, !\"PIC Level\", i32 2}\n",
      "!2 = !{i32 7, !\"PIE Level\", i32 2}\n",
      "!3 = !{i32 7, !\"uwtable\", i32 1}\n",
      "!4 = !{i32 7, !\"frame-pointer\", i32 2}\n",
      "!5 = !{!\"Ubuntu clang version 14.0.0-1ubuntu1.1\"}\n"
     ]
    }
   ],
   "source": [
    "# call clang and dump the ir\n",
    "# # -emit-llvm  print the ir\n",
    "# -S print as text not as binary \n",
    "# 0 -  output to stdout \n",
    "# \n",
    "!clang -emit-llvm -S -o - temp.c\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An LLVM plugin is a shared library that can add additional functionality to the LLVM infrastructure. Plugins can be used to add new passes, analyses, targets, and more.\n",
    "\n",
    "Plugins are dynamically loaded into LLVM. Once loaded, a plugin can register new command-line options, passes, etc., that are then available for use in that invocation of the tool.\n",
    "\n",
    "There is a cs6120 package that makes setting up the build process for plugins simple"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "llvm ir, has two forms .bc files are bitcode,  .ll forms are text versions that look like assembly.\n",
    "\n",
    "\n",
    "llvm is not written in C++ but it has a lot of features that look like C++.\n",
    "\n",
    "1) llvm does not use char* or std::string, it has something else called a StringRef. \n",
    "1) there is no std::cout or std::cerr there are outs(), errs() \n",
    "1) lot of built in data structures\n",
    "1) complex class hierarchy  \n",
    "\n",
    "```{mermaid}\n",
    "flowchart TD;\n",
    "Value --> Argument ;\n",
    "Value --> other[\"...\"];\n",
    "Value --> User;\n",
    "User --> Constant\n",
    "User--> Operator\n",
    "User--> Instruction\n",
    "Constant --> ConstantExpr\n",
    "Constant--> ConstantData\n",
    "Operator--> ConcreteOperator\n",
    "Instruction--> UnaryInst\n",
    "ConstantData --> ConstantInt\n",
    "ConstantData --> UndefValue\n",
    "Instruction --> BinaryOperator\n",
    "Instruction--> CallBase\n",
    "\n",
    "```\n",
    "\n",
    "Instructions are a kind of Value, since everything is in SSA form, so in memory operands are pointers to instructions \n",
    "so if I is an instruction\n",
    "\n",
    "outs() << *(I.getOperand(0)) ; prints an instruction \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given a Value* V, what kind of thing is V?\n",
    "\n",
    "1) isa<Argument>(V) true of V is a agument \n",
    "1) cast<Argument>(V) casts to Argument, assert falure of not Argument \n",
    "1) dyn_cast<Argument>(V) casts to Argument returns NULL if not an argument \n",
    "\n",
    "```(C++)\n",
    "Static bool isLoopInvariant(const Value *V, const Loop *L) { \n",
    "    if (isa<Constant>(V) || isa<Argument>(V) || isa<GlobalValue<(V)) {\n",
    "         return true; } \n",
    "    //otherwise it must be an instruction…    \n",
    "    return !L->contains(cast<Instruction>(V)->getParent());\n",
    "     … \n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Navigating llvm IR  - IT Containers \n",
    "\n",
    "1) Module - two way linked list of Functions\n",
    "1) Function - two way linked list of Basic Blocks\n",
    "1) Basic Block - two way linked list of Instructions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "%5 = add i32 %4,2 \n",
    "\n",
    "this instruction adds two 32 bit ints, input is in register %4 and the constant 2, result goes into register %5\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "blog post: [Why would a grad student care about llvm](https://www.cs.cornell.edu/~asampson/blog/llvm.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Cloning into 'llvm-pass-skeleton'...\n"
     ]
    }
   ],
   "source": [
    "%%bash \n",
    "rm -r llvm-pass-skeleton/\n",
    "git clone   https://github.com/sampsyo/llvm-pass-skeleton.git\n",
    "cd llvm-pass-skeleton/\n",
    "mkdir -p build \n",
    "cd build \n",
    "cmake ..\n",
    "make\n",
    "\n",
    "\n",
    "# look at  llvm-pass-skeleton/skeleton/Skeleton.cpp\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function returns PreservedAnalyses::all() to indicate that it didn’t modify M. Later, when we actually transform the program, we’ll need to return something like PreservedAnalyses::none().\n",
    "\n",
    "The ModuleAnalysisManager is  responsible for managing the analysis results for Module passes.\n",
    "\n",
    "When a pass requests an analysis, the ModuleAnalysisManager checks if the analysis result is already available. If it is, the ModuleAnalysisManager returns the cached result. If it's not, the ModuleAnalysisManager runs the analysis pass, caches the result, and then returns it.\n",
    "\n",
    "This allows LLVM to avoid recomputing analysis results unnecessarily, which can significantly improve the performance of the compiler.\n",
    "\n",
    "Here's an example of how you might use it:\n",
    "\n",
    "````\n",
    "PreservedAnalyses MyPass::run(Module &M, ModuleAnalysisManager &MAM) {\n",
    "    // Request an analysis result.\n",
    "    const auto &Result = MAM.getResult<SomeAnalysis>(M);\n",
    "\n",
    "    // Use the analysis result.\n",
    "    // ...\n",
    "\n",
    "    return PreservedAnalyses::all();\n",
    "}\n",
    "````\n",
    "\n",
    "Here is a second example getting the dominator tree \n",
    "\n",
    "\n",
    "```\n",
    "    PreservedAnalyses run(Module &M, ModuleAnalysisManager &MAM) {\n",
    "        // Get the FunctionAnalysisManager.\n",
    "        FunctionAnalysisManager &FAM = MAM.getResult<FunctionAnalysisManagerModuleProxy>(M).getManager();\n",
    "\n",
    "        for (Function &F : M) {\n",
    "            // Skip external functions.\n",
    "            if (F.isDeclaration()) continue;\n",
    "\n",
    "            // Request the dominator tree of the function.\n",
    "            const DominatorTree &DT = FAM.getResult<DominatorTreeAnalysis>(F);\n",
    "\n",
    "            // Use the dominator tree.\n",
    "            // ...\n",
    "        }\n",
    "\n",
    "        return PreservedAnalyses::all();\n",
    "    }\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "now let look at the containers "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Cloning into 'llvm-pass-skeleton'...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-- The C compiler identification is GNU 11.4.0\n",
      "-- The CXX compiler identification is GNU 11.4.0\n",
      "-- Detecting C compiler ABI info\n",
      "-- Detecting C compiler ABI info - done\n",
      "-- Check for working C compiler: /usr/bin/cc - skipped\n",
      "-- Detecting C compile features\n",
      "-- Detecting C compile features - done\n",
      "-- Detecting CXX compiler ABI info\n",
      "-- Detecting CXX compiler ABI info - done\n",
      "-- Check for working CXX compiler: /usr/bin/c++ - skipped\n",
      "-- Detecting CXX compile features\n",
      "-- Detecting CXX compile features - done\n",
      "-- Performing Test HAVE_FFI_CALL\n",
      "-- Performing Test HAVE_FFI_CALL - Success\n",
      "-- Found FFI: /usr/lib/x86_64-linux-gnu/libffi.so  \n",
      "-- Performing Test Terminfo_LINKABLE\n",
      "-- Performing Test Terminfo_LINKABLE - Success\n",
      "-- Found Terminfo: /usr/lib/x86_64-linux-gnu/libtinfo.so  \n",
      "-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version \"1.2.11\") \n",
      "-- Found LibXml2: /usr/lib/x86_64-linux-gnu/libxml2.so (found version \"2.9.13\") \n",
      "-- Linker detection: GNU ld\n",
      "-- Registering SkeletonPass as a pass plugin (static build: OFF)\n",
      "-- Configuring done\n",
      "-- Generating done\n",
      "-- Build files have been written to: /home/norm/llvm/llvm-pass-skeleton/build\n",
      "[ 50%] \u001b[32mBuilding CXX object skeleton/CMakeFiles/SkeletonPass.dir/Skeleton.cpp.o\u001b[0m\n",
      "[100%] \u001b[32m\u001b[1mLinking CXX shared module SkeletonPass.so\u001b[0m\n",
      "Error while terminating subprocess (pid=71626): \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[100%] Built target SkeletonPass\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "rm -r llvm-pass-skeleton/\n",
    "git clone  -b containers  https://github.com/sampsyo/llvm-pass-skeleton.git\n",
    "cd llvm-pass-skeleton/\n",
    "mkdir -p build \n",
    "cd build \n",
    "cmake ..\n",
    "make\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In a function called main!\n",
      "Function body:\n",
      "; Function Attrs: noinline nounwind optnone uwtable\n",
      "define dso_local i32 @main(i32 noundef %0, i8** noundef %1) #0 {\n",
      "  %3 = alloca i32, align 4\n",
      "  %4 = alloca i32, align 4\n",
      "  %5 = alloca i8**, align 8\n",
      "  store i32 0, i32* %3, align 4\n",
      "  store i32 %0, i32* %4, align 4\n",
      "  store i8** %1, i8*** %5, align 8\n",
      "  %6 = load i32, i32* %4, align 4\n",
      "  ret i32 %6\n",
      "}\n",
      "Basic block:\n",
      "\n",
      "  %3 = alloca i32, align 4\n",
      "  %4 = alloca i32, align 4\n",
      "  %5 = alloca i8**, align 8\n",
      "  store i32 0, i32* %3, align 4\n",
      "  store i32 %0, i32* %4, align 4\n",
      "  store i8** %1, i8*** %5, align 8\n",
      "  %6 = load i32, i32* %4, align 4\n",
      "  ret i32 %6\n",
      "Instruction: \n",
      "  %3 = alloca i32, align 4\n",
      "Instruction: \n",
      "  %4 = alloca i32, align 4\n",
      "Instruction: \n",
      "  %5 = alloca i8**, align 8\n",
      "Instruction: \n",
      "  store i32 0, i32* %3, align 4\n",
      "Instruction: \n",
      "  store i32 %0, i32* %4, align 4\n",
      "Instruction: \n",
      "  store i8** %1, i8*** %5, align 8\n",
      "Instruction: \n",
      "  %6 = load i32, i32* %4, align 4\n",
      "Instruction: \n",
      "  ret i32 %6\n",
      "I saw a function called main!\n"
     ]
    }
   ],
   "source": [
    "# run the plugin \n",
    "# \n",
    "!clang -fpass-plugin=`echo llvm-pass-skeleton/build/skeleton/SkeletonPass.*` temp.c\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting temp1.c\n"
     ]
    }
   ],
   "source": [
    "%%writefile temp1.c\n",
    "int main(int argc, char** argv){\n",
    "    if (argc >2 )\n",
    "        return argc;\n",
    "    return 0;\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In a function called main!\n",
      "Function body:\n",
      "; Function Attrs: noinline nounwind optnone uwtable\n",
      "define dso_local i32 @main(i32 noundef %0, i8** noundef %1) #0 {\n",
      "  %3 = alloca i32, align 4\n",
      "  %4 = alloca i32, align 4\n",
      "  %5 = alloca i8**, align 8\n",
      "  store i32 0, i32* %3, align 4\n",
      "  store i32 %0, i32* %4, align 4\n",
      "  store i8** %1, i8*** %5, align 8\n",
      "  %6 = load i32, i32* %4, align 4\n",
      "  %7 = icmp sgt i32 %6, 2\n",
      "  br i1 %7, label %8, label %10\n",
      "\n",
      "8:                                                ; preds = %2\n",
      "  %9 = load i32, i32* %4, align 4\n",
      "  store i32 %9, i32* %3, align 4\n",
      "  br label %11\n",
      "\n",
      "10:                                               ; preds = %2\n",
      "  store i32 0, i32* %3, align 4\n",
      "  br label %11\n",
      "\n",
      "11:                                               ; preds = %10, %8\n",
      "  %12 = load i32, i32* %3, align 4\n",
      "  ret i32 %12\n",
      "}\n",
      "Basic block:\n",
      "\n",
      "  %3 = alloca i32, align 4\n",
      "  %4 = alloca i32, align 4\n",
      "  %5 = alloca i8**, align 8\n",
      "  store i32 0, i32* %3, align 4\n",
      "  store i32 %0, i32* %4, align 4\n",
      "  store i8** %1, i8*** %5, align 8\n",
      "  %6 = load i32, i32* %4, align 4\n",
      "  %7 = icmp sgt i32 %6, 2\n",
      "  br i1 %7, label %8, label %10\n",
      "Instruction: \n",
      "  %3 = alloca i32, align 4\n",
      "Instruction: \n",
      "  %4 = alloca i32, align 4\n",
      "Instruction: \n",
      "  %5 = alloca i8**, align 8\n",
      "Instruction: \n",
      "  store i32 0, i32* %3, align 4\n",
      "Instruction: \n",
      "  store i32 %0, i32* %4, align 4\n",
      "Instruction: \n",
      "  store i8** %1, i8*** %5, align 8\n",
      "Instruction: \n",
      "  %6 = load i32, i32* %4, align 4\n",
      "Instruction: \n",
      "  %7 = icmp sgt i32 %6, 2\n",
      "Instruction: \n",
      "  br i1 %7, label %8, label %10\n",
      "Basic block:\n",
      "\n",
      "8:                                                ; preds = %2\n",
      "  %9 = load i32, i32* %4, align 4\n",
      "  store i32 %9, i32* %3, align 4\n",
      "  br label %11\n",
      "Instruction: \n",
      "  %9 = load i32, i32* %4, align 4\n",
      "Instruction: \n",
      "  store i32 %9, i32* %3, align 4\n",
      "Instruction: \n",
      "  br label %11\n",
      "Basic block:\n",
      "\n",
      "10:                                               ; preds = %2\n",
      "  store i32 0, i32* %3, align 4\n",
      "  br label %11\n",
      "Instruction: \n",
      "  store i32 0, i32* %3, align 4\n",
      "Instruction: \n",
      "  br label %11\n",
      "Basic block:\n",
      "\n",
      "11:                                               ; preds = %10, %8\n",
      "  %12 = load i32, i32* %3, align 4\n",
      "  ret i32 %12\n",
      "Instruction: \n",
      "  %12 = load i32, i32* %3, align 4\n",
      "Instruction: \n",
      "  ret i32 %12\n",
      "I saw a function called main!\n"
     ]
    }
   ],
   "source": [
    "!clang -fpass-plugin=`echo llvm-pass-skeleton/build/skeleton/SkeletonPass.*` temp1.c"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](dot.pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "using IRBuilder is a mess, So I'm going to show a trick that makes it much simpler "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Cloning into 'llvm-pass-skeleton'...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-- The C compiler identification is GNU 11.4.0\n",
      "-- The CXX compiler identification is GNU 11.4.0\n",
      "-- Detecting C compiler ABI info\n",
      "-- Detecting C compiler ABI info - done\n",
      "-- Check for working C compiler: /usr/bin/cc - skipped\n",
      "-- Detecting C compile features\n",
      "-- Detecting C compile features - done\n",
      "-- Detecting CXX compiler ABI info\n",
      "-- Detecting CXX compiler ABI info - done\n",
      "-- Check for working CXX compiler: /usr/bin/c++ - skipped\n",
      "-- Detecting CXX compile features\n",
      "-- Detecting CXX compile features - done\n",
      "-- Performing Test HAVE_FFI_CALL\n",
      "-- Performing Test HAVE_FFI_CALL - Success\n",
      "-- Found FFI: /usr/lib/x86_64-linux-gnu/libffi.so  \n",
      "-- Performing Test Terminfo_LINKABLE\n",
      "-- Performing Test Terminfo_LINKABLE - Success\n",
      "-- Found Terminfo: /usr/lib/x86_64-linux-gnu/libtinfo.so  \n",
      "-- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version \"1.2.11\") \n",
      "-- Found LibXml2: /usr/lib/x86_64-linux-gnu/libxml2.so (found version \"2.9.13\") \n",
      "-- Linker detection: GNU ld\n",
      "-- Registering SkeletonPass as a pass plugin (static build: OFF)\n",
      "-- Configuring done\n",
      "-- Generating done\n",
      "-- Build files have been written to: /home/norm/llvm/llvm-pass-skeleton/build\n",
      "[ 50%] \u001b[32mBuilding CXX object skeleton/CMakeFiles/SkeletonPass.dir/Skeleton.cpp.o\u001b[0m\n",
      "[100%] \u001b[32m\u001b[1mLinking CXX shared module SkeletonPass.so\u001b[0m\n",
      "[100%] Built target SkeletonPass\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "rm -r llvm-pass-skeleton/\n",
    "git clone  -b rtlib  https://github.com/sampsyo/llvm-pass-skeleton.git\n",
    "cd llvm-pass-skeleton/\n",
    "mkdir -p build \n",
    "cd build \n",
    "cmake ..\n",
    "make"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "cat: ls: No such file or directory\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#include \"llvm/Pass.h\"\n",
      "#include \"llvm/Passes/PassBuilder.h\"\n",
      "#include \"llvm/Passes/PassPlugin.h\"\n",
      "#include \"llvm/Support/raw_ostream.h\"\n",
      "#include \"llvm/IR/IRBuilder.h\"\n",
      "#include \"llvm/Transforms/Utils/BasicBlockUtils.h\"\n",
      "using namespace llvm;\n",
      "\n",
      "namespace {\n",
      "\n",
      "struct SkeletonPass : public PassInfoMixin<SkeletonPass> {\n",
      "    PreservedAnalyses run(Module &M, ModuleAnalysisManager &AM) {\n",
      "        for (auto &F : M.functions()) {\n",
      "\n",
      "            // Get the function to call from our runtime library.\n",
      "            LLVMContext &Ctx = F.getContext();\n",
      "            std::vector<Type*> paramTypes = {Type::getInt32Ty(Ctx)};\n",
      "            Type *retType = Type::getVoidTy(Ctx);\n",
      "            FunctionType *logFuncType = FunctionType::get(retType, paramTypes, false);\n",
      "            FunctionCallee logFunc =\n",
      "                F.getParent()->getOrInsertFunction(\"logop\", logFuncType);\n",
      "\n",
      "            for (auto &B : F) {\n",
      "                for (auto &I : B) {\n",
      "                    if (auto *op = dyn_cast<BinaryOperator>(&I)) {\n",
      "                        // Insert *after* `op`.\n",
      "                        IRBuilder<> builder(op);\n",
      "                        builder.SetInsertPoint(&B, ++builder.GetInsertPoint());\n",
      "\n",
      "                        // Insert a call to our function.\n",
      "                        Value* args[] = {op};\n",
      "                        builder.CreateCall(logFunc, args);\n",
      "\n",
      "                        return PreservedAnalyses::none();\n",
      "                    }\n",
      "                }\n",
      "            }\n",
      "\n",
      "        }\n",
      "        return PreservedAnalyses::all();\n",
      "    }\n",
      "};\n",
      "\n",
      "}\n",
      "\n",
      "extern \"C\" LLVM_ATTRIBUTE_WEAK ::llvm::PassPluginLibraryInfo\n",
      "llvmGetPassPluginInfo() {\n",
      "    return {\n",
      "        .APIVersion = LLVM_PLUGIN_API_VERSION,\n",
      "        .PluginName = \"Skeleton pass\",\n",
      "        .PluginVersion = \"v0.1\",\n",
      "        .RegisterPassBuilderCallbacks = [](PassBuilder &PB) {\n",
      "            PB.registerPipelineStartEPCallback(\n",
      "                [](ModulePassManager &MPM, OptimizationLevel Level) {\n",
      "                    MPM.addPass(SkeletonPass());\n",
      "                });\n",
      "        }\n",
      "    };\n",
      "}\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "%%bash \n",
    "cat ls ~/llvm/llvm-pass-skeleton/skeleton/Skeleton.cpp \n",
    "echo done"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#include <stdio.h>\n",
      "void logop(int i) {\n",
      "    printf(\"computed: %i\\n\", i);\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%%bash \n",
    "cat /home/norm/llvm/llvm-pass-skeleton/rtlib.c\n",
    "echo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting llvm-pass-skeleton/test_r.cpp\n"
     ]
    }
   ],
   "source": [
    "%%writefile llvm-pass-skeleton/test_r.cpp\n",
    "#include <stdio.h>\n",
    "int main (int argc, char** argv) {\n",
    "    printf(\"%d %d\", argc, (argc + 2) * (argc +3));\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "computed: 7\n",
      "5 56\n"
     ]
    }
   ],
   "source": [
    "%%bash \n",
    "cd llvm-pass-skeleton/\n",
    "cc -c rtlib.c\n",
    "clang  -fpass-plugin=build/skeleton/SkeletonPass.so -c test_r.cpp\n",
    "cc test_r.o rtlib.o\n",
    "./a.out 1 2 3 4\n",
    "echo "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "kaggle_comp",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

---
execute:
  echo: true
format:
  html: default
  revealjs:
    chalkboard: true
    code-fold: true
    code-line-numbers: true
    echo: true
    mathjax: true
    output-file: revealjs_05b_licm.qmd
    scrollable: true
    slideNumber: c/t
sidebar: false
title: loop invariant code motion

---

## licm 

Loop invariant code motion recognizes computations in loop that produce the same value on each iteration  and moves them out of the loop.

## A very common case for this is matrix addressing 

a[i,j] might expand to  to $i*4*\operatorname{stride_{a}} + j *4$ 

```
for j 
  a[i,j] = f(a[i,j+1])
```

turns into 


```
a = 
b = 
result = 0
for (){
    result += a*b
}
```

## when is a computation loop invariant 

f(a,b)

1. a,b are constants 
1. a,b are defined outside the loop, 
1. a,b are loop invariant 

if in ssa there is only one reaching def

for non ssa, we need 

1. all reaching defs of a,b defined outside of the loop
1. only one def of a,b reaches the computation and that def is loop invariant 

##  when is a computation loop invariant 

```
a defined outside of the loop (need one definition or ssa )

b = a*2 

d = 5 + b is loop invariant if b
```

In ssa a variable is loop invariant if it does not have a phi function at the header  of the 
loop, or it is defined by a phi function and all the inputs are loop constants 


SSA If we find a loop-invariant computation in SSA form, then we just move it out of the loop to a block before the loop. When moving a (side effect-free) SSA loop-invariant computation to a previous position, nothing can go wrong, because the value it computes cannot be overwritten later and the values it depends on cannot have been changed 



## pre steps - reshape the cfg 

1. find the natural loops 
2. add pre-header 

if we are going to move code we often need to add a special basic block which is called a  ***landing pad*** or  a ***pre-header***
create a new block b.  change all the preds of the loop header to point to the pre-header, add an edge from b to the loop header

## pre-header can change phi nodes

::: {.columns}

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TB
A["x1 = 3"]
B1["y1 = 4"]
B2["y2 = 5"]
C["x2=phi(x1,x3)\ny3=phi(y1,y2,y3)\nz1=x2*x3\nq1=y3*y3\nw1=y3+2"]
D["w2=w1+5"]
E["w3=phi(w1,w2)\np1=w3+y3\nx3=x2+1\nq2=q1+1"]
A--> B1
A--> B2
B1--> C
B2--> C
C-->D
D--> E
C--> E
E--> C
E--> After
```

:::

::: {.column}



```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TB
A["x1 = 3"]
B1["y1 = 4"]
B2["y2 = 5"]
LP["y3=phi(y1,y2)"]
C["x2=phi(x1,x3)\nz1=x2*x3\nq1=y3*y3\nw1=y3+2"]
D["w2=w1+5"]
E["w3=phi(w1,w2)\np1=w3+y3\nx3=x2+1\nq2=q1+1"]
A--> B1
A--> B2
B1-->LP --> C
B2-->LP 
C-->D
D--> E
C--> E
E--> C
E--> After
```

:::

::: 




## while loop may not execute, we can restructure into a do-while 

::: {.columns}

::: {.column}

```
while(e) {
  s(j) 
}
```

:::

::: {.column}


```
if (e) {
  t  = j loopinv 
  do {
    s
  } while(e)
}
```

:::

:::



##  check for zero trip count 

::: {.columns}

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%
graph TB
A;
B["if e"]
S
endloop
next
A--> B
B--> next
B--> S
S--> endloop
endloop --> B

```

:::

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TB
pretest["if e"]
pretest-->next 
do
s
endloop
posttest["if e"]
next
pretest-->do
do --> s
s--> endloop
endloop--> posttest
posttest --> do
posttest --> next

```


:::

::: 


## when is ok to move a computation 

1. no side effects - cannot move  alloc 10 outside of loop;
1. in non ssa, computation d dominates all loop exits where d is live
1. in non ssa only one def of d in the loop

::: {.columns}

::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TB
pre["d = 0"]
L1["if i > n" ]
loop1["i = i +1"]
d["d = a op b"]
use["  =d "]
next[" = d"]

pre--> L1
L1--> loop1
loop1--> d
d--> use 
use --> L1
L1 --> next
```


:::

::: {.column}
```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TB
pre["d = 0"]
L1["i = i +1\n d= a op b\n use d"]
L2["d = 2\n use d"]
L3["if (i < n)"]
pre--> L1
L1--> L2
L2--> L3
L3--> after
L3 --> L1

```


:::

::: 


## find loop invariant instructions, 


## naturally iterative 

```
iterate to convergence
 for each instr in  the loop
   see if it is loop invar 
   if it is - move it 
```


##  nested loops 


we want to process inner loops first 

1. add all the pre-headers 
1. walk the dominator tree in reverse post order - saving all the  loop headers